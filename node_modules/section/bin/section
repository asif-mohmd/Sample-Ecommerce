#!/usr/bin/env node

'use strict';

var path = require('path');

var cwd = process.cwd();

process.chdir(__dirname + '/../');

// Load grunt.
var grunt = require('grunt'),
    pkg = grunt.file.readJSON('package.json'),
    optlist = grunt.cli.optlist,
    help = grunt.help,
    log = grunt.log;

// Load tasks from npm modules.
// We are loading tasks here because the base path will be different inside the Gruntfile.
Object.keys(pkg.dependencies).forEach(function(dep) {
  if (~dep.search(/^grunt-/))
      grunt.loadNpmTasks(dep);
});

// Load tasks from the tasks dir.
grunt.loadTasks('tasks');

// Customize the cli opttion list.
['force', 'gruntfile', 'tasks', 'npm', 'completion'].forEach(function(opt) {
  delete optlist[opt];
});

optlist.base.info = 'Specify an alternate base path. By default, all file paths are relative to the current working directory.';
optlist.version.info = 'Print the section version. Combine with --verbose for more info.';

optlist.output = {
  info: 'Specify an alternate output path. By default files are created in the ./output directory.',
  type: path
};

optlist.url = {
  info: 'Optional URL for use in templates.',
  type: String
};

optlist.config = {
  info: 'Specify a configuration file. This overrides the configuration file in the current directory if present.',
  type: path
};

optlist.port = {
  info: 'Port number to use when starting a local server. Defaults to 8000.',
  type: Number
};

// Customize the help screen.
help.header = function() {
  log.writeln('Section: The Grunt Static Site Generator (v' + pkg.version + ')');
};

help.optionsFooter = function() {};

help.initTasks = function() {
  // Initialize task system so that the tasks can be listed.
  grunt.task.init([], {help: true});

  help._tasks = [];
  Object.keys(grunt.task._tasks).forEach(function(name) {
    var task = grunt.task._tasks[name];
    // We only want to print tasks defined in the Gruntfile.
    if (task.meta.info == 'Gruntfile') {
      help.initCol1(name);
      help._tasks.push(task);
    }
  });
};

help.tasks = function() {
  log.header('Available tasks');

  if (help._tasks.length === 0) {
    grunt.log.writeln('(no tasks found)');
  } else {
    help.table(help._tasks.map(function(task) {
      return [task.name, task.info];
    }));
  }
};

help.footer = function() {
  log.writeln().writeln('For more information, see ' + pkg.homepage);
};

// Log section version if requested.
if (grunt.cli.options.version)
  log.writeln('section v' + pkg.version);

// Run grunt.
grunt.cli({
  base: cwd,
  gruntfile: __dirname + '/../config.js'
});
